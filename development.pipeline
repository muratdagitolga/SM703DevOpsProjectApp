pipeline {
    agent any
    tools {
        maven 'maven1'
    }
    stages {

        stage('Clone repository') {
            steps {
                git branch: 'development', url: 'https://github.com/muratdagitolga/SM703DevOpsProjectApp.git'
                echo "The code is pulled from Development branch'"
            }
        }

        stage('Java Version Test') {
            steps {
                sh 'java -version'
            }
        }

        stage('Java Build') {
            steps {
                sh 'mvn clean install'
                sh 'mvn clean compile'
                echo "Project is compiled successfully..."
            }
        }

        stage('Run') {
            steps {
                script {
                    if (fileExists('out/artifacts/DevOpsProjectApp_jar')) {
                        echo "Searching..."
                        echo "The executable jar file is found!"
                    }
                    dir('out/artifacts/DevOpsProjectApp_jar') {
                        sh 'java -jar DevOpsProjectApp.jar'
                        sh "pwd"
                    }
                }
            }
        }
         stage('Test') {
            steps {
                script {
                    if (fileExists('src/test/java/org/devopsexample/SimpleAdditionTest.java')) {
                        echo "File found!"
                    }
                    dir('src/test/java/org/devopsexample') {
                        sh "pwd"
                    }
                }
            }
         }
         stage('Scan') {
            steps {
                withSonarQubeEnv(installationName: 'sonarqube') {
                    sh'mvn clean org.sonarcource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar'
                }
            }
         }
         stage('Deploy') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'github-private-key', keyFileVariable: 'SSH_KEY')]) {
                   sh("git push origin development:pre-prod")
                }
            }
         }
}
    post {
                 always {
                     echo 'This will always run'
                 }
                 success {
                     echo 'This will run only if successful'
                     emailext body: "Build Başarılı - Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", subject: "SUCCESS CI: Project name -> ${env.JOB_NAME}", to: "muratdagi.tolga@outlook.com";
                 }
                 failure {
                     emailext body: "Build Hatalı - Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "muratdagi.tolga@outlook.com";
                 }
                 unstable {
                     echo 'This will run only if the run was marked as unstable'
                 }
                 changed {
                     echo 'This will run only if the state of the Pipeline has changed'
                     echo 'For example, if the Pipeline was previously failing but is now successful'
                 }
          }

}
